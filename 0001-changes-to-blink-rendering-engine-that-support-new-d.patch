From da194c5208ba430090f43a9499f43969d0abeba6 Mon Sep 17 00:00:00 2001
From: dswilson4 <dsw6ru@virginia.edu>
Date: Mon, 30 Nov 2020 20:44:28 -0500
Subject: [PATCH] changes to blink rendering engine that support new
 disable-dynamic feature

---
 .../blink/renderer/core/dom/document.cc       | 21 ++++++++
 .../blink/renderer/core/dom/document.h        |  3 ++
 .../renderer/core/dom/document_fragment.cc    | 44 ++++++++++++++--
 .../renderer/core/dom/document_fragment.h     |  4 ++
 .../core/frame/csp/content_security_policy.cc | 20 +++++++-
 .../core/frame/csp/content_security_policy.h  |  6 +++
 .../core/frame/csp/csp_directive_list.cc      | 16 ++++++
 .../core/frame/csp/csp_directive_list.h       | 15 ++++++
 .../core/frame/csp/source_list_directive.cc   | 19 +++++++
 .../core/frame/csp/source_list_directive.h    |  3 ++
 .../html/parser/nesting_level_incrementer.h   |  4 ++
 .../core/script/html_parser_script_runner.cc  | 50 +++++++++++++++++++
 .../core/script/html_parser_script_runner.h   |  4 ++
 13 files changed, 204 insertions(+), 5 deletions(-)

diff --git a/third_party/blink/renderer/core/dom/document.cc b/third_party/blink/renderer/core/dom/document.cc
index b2d18598e9c1..d41d3d6dac94 100644
--- a/third_party/blink/renderer/core/dom/document.cc
+++ b/third_party/blink/renderer/core/dom/document.cc
@@ -339,6 +339,8 @@
 #include "third_party/blink/renderer/platform/wtf/text/character_names.h"
 #include "third_party/blink/renderer/platform/wtf/text/string_buffer.h"
 #include "third_party/blink/renderer/platform/wtf/text/text_encoding_registry.h"
+#include "base/logging.h"
+
 
 #ifndef NDEBUG
 using WeakDocumentSet = blink::HeapHashSet<blink::WeakMember<blink::Document>>;
@@ -4307,6 +4309,9 @@ void Document::write(const String& text,
       "removing-document-write",
       base::TimeDelta(), nullptr);
   probe::BreakableLocation(domWindow(), "Document.write");
+
+  // ContentSecurityPolicy* docCSP = entered_document->GetContentSecurityPolicy();
+  // bool disableDynamicPresent = docCSP->FoundDisableDynamic();
   parser_->insert(text);
 }
 
@@ -4630,11 +4635,27 @@ CSSStyleSheet& Document::ElementSheet() {
   return *elem_sheet_;
 }
 
+ContentSecurityPolicy* Document::GetContentSecurityPolicy() const {
+  return execution_context_->GetContentSecurityPolicy();
+}
+
 void Document::MaybeHandleHttpRefresh(const String& content,
                                       HttpRefreshType http_refresh_type) {
   if (is_view_source_ || !dom_window_)
     return;
 
+  // here do a check for disable-dynamic... and return early to prevent
+  // refresh processing
+  // create constant pointer to calling document
+  const Document* referrer_document = this;
+
+  ContentSecurityPolicy* docCSP = referrer_document->GetContentSecurityPolicy();
+  bool disableDynamicPresent = docCSP->FoundDisableDynamic();
+  if (disableDynamicPresent) {
+    LOG(INFO) << "Refresh has been disabled";
+    return;
+  }
+
   base::TimeDelta delay;
   String refresh_url_string;
   if (!ParseHTTPRefresh(content,
diff --git a/third_party/blink/renderer/core/dom/document.h b/third_party/blink/renderer/core/dom/document.h
index 37ae8c5c8d75..98c6f5e874f3 100644
--- a/third_party/blink/renderer/core/dom/document.h
+++ b/third_party/blink/renderer/core/dom/document.h
@@ -114,6 +114,7 @@ class DocumentData;
 class ElementIntersectionObserverData;
 class ComputedStyle;
 class ConsoleMessage;
+class ContentSecurityPolicy;
 class ContextFeatures;
 class CookieJar;
 class V0CustomElementMicrotaskRunQueue;
@@ -1665,6 +1666,8 @@ class CORE_EXPORT Document : public ContainerNode,
   void SetFindInPageActiveMatchNode(Node*);
   const Node* GetFindInPageActiveMatchNode() const;
 
+  ContentSecurityPolicy* GetContentSecurityPolicy() const;
+
  protected:
   void ClearXMLVersion() { xml_version_ = String(); }
 
diff --git a/third_party/blink/renderer/core/dom/document_fragment.cc b/third_party/blink/renderer/core/dom/document_fragment.cc
index 0cd276b9e5df..b8ccc455f250 100644
--- a/third_party/blink/renderer/core/dom/document_fragment.cc
+++ b/third_party/blink/renderer/core/dom/document_fragment.cc
@@ -27,16 +27,40 @@
 #include "third_party/blink/renderer/core/xml/parser/xml_document_parser.h"
 #include "third_party/blink/renderer/platform/bindings/runtime_call_stats.h"
 #include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"
+#include "third_party/blink/renderer/core/frame/csp/content_security_policy.h"
+
+#include "base/logging.h"
+
 
 namespace blink {
 
 DocumentFragment::DocumentFragment(Document* document,
                                    ConstructionType construction_type)
-    : ContainerNode(document, construction_type) {}
+    : ContainerNode(document, construction_type),
+      disable_dynamic_present_(false) {}
+//       Disable_Dynamic_Enabled_(false) {}
+
+// void DocumentFragment::SetDisableDynamic() {
+//   Disable_Dynamic_Enabled_ = true;
+// }
+
+ DocumentFragment* DocumentFragment::Create(Document& document) {
+
+  DocumentFragment* createdFragment = MakeGarbageCollected<DocumentFragment>(&document,
+                                                  Node::kCreateDocumentFragment);
+    // adding code to check for disable-dyanmic in CSP
+  ContentSecurityPolicy* docCSP = document.GetContentSecurityPolicy();
+
+  bool disableDynamicPresent = docCSP->FoundDisableDynamic();
 
-DocumentFragment* DocumentFragment::Create(Document& document) {
-  return MakeGarbageCollected<DocumentFragment>(&document,
-                                                Node::kCreateDocumentFragment);
+  LOG(INFO) << "this is the raw value for disableDynamicPresent" << disableDynamicPresent;
+  if (disableDynamicPresent) {
+    // Restrict scripting permissions to created document fragment.
+    LOG(INFO) << "detected disable dynamic within document fragment";
+    createdFragment->SetDisableDynamic();
+  }
+
+  return createdFragment;
 }
 
 String DocumentFragment::nodeName() const {
@@ -70,13 +94,25 @@ Node* DocumentFragment::Clone(Document& factory, CloneChildrenFlag flag) const {
 void DocumentFragment::ParseHTML(const String& source,
                                  Element* context_element,
                                  ParserContentPolicy parser_content_policy) {
+  // We should only parseHTML in instances where disable dynamic has not been found within the document,
+  // meaning the Disable_Dynamic_Enabled_ flag is false.
+  // might end up being:
+  // if (!this->DisableDynamicInDocument()) {}
+  if (DisableDynamicInDocument()) {
+    parser_content_policy = kDisallowScriptingAndPluginContent;
+    LOG(INFO) << "------------------------------------------";
+    LOG(INFO) << "DD IS IN DOC...kDisallowScriptingAndPluginContent SET";
+  }
   RUNTIME_CALL_TIMER_SCOPE(
       V8PerIsolateData::MainThreadIsolate(),
       RuntimeCallStats::CounterId::kDocumentFragmentParseHTML);
   HTMLDocumentParser::ParseDocumentFragment(source, this, context_element,
                                             parser_content_policy);
+
+  LOG(INFO) << "ParseHTML has been called, CHECK FOR 'DD IN DOC' ^^ ";
 }
 
+
 bool DocumentFragment::ParseXML(const String& source,
                                 Element* context_element,
                                 ParserContentPolicy parser_content_policy) {
diff --git a/third_party/blink/renderer/core/dom/document_fragment.h b/third_party/blink/renderer/core/dom/document_fragment.h
index 00c2703b5c62..5f74a5b94b05 100644
--- a/third_party/blink/renderer/core/dom/document_fragment.h
+++ b/third_party/blink/renderer/core/dom/document_fragment.h
@@ -48,6 +48,8 @@ class CORE_EXPORT DocumentFragment : public ContainerNode {
 
   bool CanContainRangeEndPoint() const final { return true; }
   virtual bool IsTemplateContent() const { return false; }
+  bool DisableDynamicInDocument() const { return disable_dynamic_present_; }
+  // void SetDisableDynamic();
 
  protected:
   String nodeName() const final;
@@ -59,6 +61,8 @@ class CORE_EXPORT DocumentFragment : public ContainerNode {
 
   bool IsDocumentFragment() const =
       delete;  // This will catch anyone doing an unnecessary check.
+  void SetDisableDynamic() { disable_dynamic_present_ = true; }
+  bool disable_dynamic_present_{false};
 };
 
 template <>
diff --git a/third_party/blink/renderer/core/frame/csp/content_security_policy.cc b/third_party/blink/renderer/core/frame/csp/content_security_policy.cc
index 43c72ec32aef..6292e60039d1 100644
--- a/third_party/blink/renderer/core/frame/csp/content_security_policy.cc
+++ b/third_party/blink/renderer/core/frame/csp/content_security_policy.cc
@@ -75,6 +75,9 @@
 #include "third_party/blink/renderer/platform/wtf/wtf_size_t.h"
 #include "v8/include/v8.h"
 
+#include "base/logging.h"
+
+
 namespace blink {
 
 using network::mojom::ContentSecurityPolicySource;
@@ -161,7 +164,8 @@ ContentSecurityPolicy::ContentSecurityPolicy()
       sandbox_mask_(network::mojom::blink::WebSandboxFlags::kNone),
       require_trusted_types_(false),
       insecure_request_policy_(
-          mojom::blink::InsecureRequestPolicy::kLeaveInsecureRequestsAlone) {}
+          mojom::blink::InsecureRequestPolicy::kLeaveInsecureRequestsAlone), 
+      disable_dynamic_present_(false) {}
 
 bool ContentSecurityPolicy::IsBound() {
   return delegate_;
@@ -391,6 +395,8 @@ void ContentSecurityPolicy::AddPolicyFromHeaderValue(
   // RFC2616, section 4.2 specifies that headers appearing multiple times can
   // be combined with a comma. Walk the header string, and parse each comma
   // separated chunk as a separate header.
+
+  // important
   const UChar* position = begin;
   while (position < end) {
     SkipUntil<UChar>(position, end, ',');
@@ -400,9 +406,17 @@ void ContentSecurityPolicy::AddPolicyFromHeaderValue(
     Member<CSPDirectiveList> policy =
         CSPDirectiveList::Create(this, begin, position, type, source);
 
+    if (policy->CheckDisableDynamic()) {
+      SetDisableDynamic();
+      LOG(INFO) << "Disable Dynamic found within CSP object :^) " << FoundDisableDynamic();;
+    }
+
     if (policy->ShouldDisableEval() && disable_eval_error_message_.IsNull()) {
       disable_eval_error_message_ = policy->EvalDisabledErrorMessage();
     }
+    // if (policy->CheckDisableDynamic()) {
+    //   disable_dynamic_present_ = true;
+    // }
 
     policies_.push_back(policy.Release());
 
@@ -451,6 +465,10 @@ void ContentSecurityPolicy::SetOverrideAllowInlineStyle(bool value) {
   override_inline_style_allowed_ = value;
 }
 
+// void ContentSecurityPolicy::SetDisableDynamic(bool value) {
+//   disable_dyanmic_present_ = value;
+// }
+
 void ContentSecurityPolicy::SetOverrideURLForSelf(const KURL& url) {
   // Create a temporary CSPSource so that 'self' expressions can be resolved
   // before we bind to an execution context (for 'frame-ancestor' resolution,
diff --git a/third_party/blink/renderer/core/frame/csp/content_security_policy.h b/third_party/blink/renderer/core/frame/csp/content_security_policy.h
index 1ffbbe5ced3c..64827d8b9118 100644
--- a/third_party/blink/renderer/core/frame/csp/content_security_policy.h
+++ b/third_party/blink/renderer/core/frame/csp/content_security_policy.h
@@ -504,6 +504,9 @@ class CORE_EXPORT ContentSecurityPolicy final
 
   void Count(WebFeature feature) const;
 
+  bool FoundDisableDynamic() const { return disable_dynamic_present_; }
+
+
  private:
   FRIEND_TEST_ALL_PREFIXES(ContentSecurityPolicyTest, NonceInline);
   FRIEND_TEST_ALL_PREFIXES(ContentSecurityPolicyTest, NonceSinglePolicy);
@@ -569,6 +572,8 @@ class CORE_EXPORT ContentSecurityPolicy final
       LocalFrame* = nullptr,
       Element* = nullptr);
 
+  void SetDisableDynamic() { disable_dynamic_present_ = true; }
+
   Member<ContentSecurityPolicyDelegate> delegate_;
   bool override_inline_style_allowed_;
   CSPDirectiveListVector policies_;
@@ -593,6 +598,7 @@ class CORE_EXPORT ContentSecurityPolicy final
   String self_protocol_;
 
   bool supports_wasm_eval_ = false;
+  bool disable_dynamic_present_{false};
 };
 
 }  // namespace blink
diff --git a/third_party/blink/renderer/core/frame/csp/csp_directive_list.cc b/third_party/blink/renderer/core/frame/csp/csp_directive_list.cc
index 5aec2cab35a7..775c3024e28c 100644
--- a/third_party/blink/renderer/core/frame/csp/csp_directive_list.cc
+++ b/third_party/blink/renderer/core/frame/csp/csp_directive_list.cc
@@ -32,6 +32,9 @@
 #include "third_party/blink/renderer/platform/wtf/text/string_utf8_adaptor.h"
 #include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"
 
+#include "base/logging.h"
+
+
 namespace blink {
 
 namespace {
@@ -142,6 +145,7 @@ CSPDirectiveList::CSPDirectiveList(ContentSecurityPolicy* policy,
       has_sandbox_policy_(false),
       strict_mixed_content_checking_enforced_(false),
       upgrade_insecure_requests_(false),
+      disable_dynamic_present_(false),
       use_reporting_api_(false) {}
 
 CSPDirectiveList* CSPDirectiveList::Create(ContentSecurityPolicy* policy,
@@ -154,6 +158,13 @@ CSPDirectiveList* CSPDirectiveList::Create(ContentSecurityPolicy* policy,
       MakeGarbageCollected<CSPDirectiveList>(policy, type, source);
   directives->Parse(begin, end, should_parse_wasm_eval);
 
+  if (directives->CheckDisableDynamic(directives->OperativeDirective(
+          ContentSecurityPolicy::DirectiveType::kScriptSrc))) {
+    directives->SetDisableDynamic();
+    LOG(INFO) << "found disable dynamic again " << directives->CheckDisableDynamic();
+  }
+
+
   if (!directives->CheckEval(directives->OperativeDirective(
           ContentSecurityPolicy::DirectiveType::kScriptSrc))) {
     String message =
@@ -313,6 +324,10 @@ bool CSPDirectiveList::CheckDynamic(SourceListDirective* directive) const {
   return !directive || directive->AllowDynamic();
 }
 
+bool CSPDirectiveList::CheckDisableDynamic(SourceListDirective* directive) const {
+  return !directive || directive->DisableDynamic();
+}
+
 void CSPDirectiveList::ReportMixedContent(
     const KURL& blocked_url,
     ResourceRequest::RedirectStatus redirect_status) const {
@@ -345,6 +360,7 @@ bool CSPDirectiveList::AllowTrustedTypeAssignmentFailure(
   return IsReportOnly();
 }
 
+//important
 bool CSPDirectiveList::CheckSource(
     SourceListDirective* directive,
     const KURL& url,
diff --git a/third_party/blink/renderer/core/frame/csp/csp_directive_list.h b/third_party/blink/renderer/core/frame/csp/csp_directive_list.h
index 7185ce051f2f..47c7bac42e65 100644
--- a/third_party/blink/renderer/core/frame/csp/csp_directive_list.h
+++ b/third_party/blink/renderer/core/frame/csp/csp_directive_list.h
@@ -173,6 +173,10 @@ class CORE_EXPORT CSPDirectiveList final
 
   void Trace(Visitor*) const;
 
+  bool CheckDisableDynamic() const {
+    return disable_dynamic_present_;
+  }
+
  private:
   FRIEND_TEST_ALL_PREFIXES(CSPDirectiveListTest, IsMatchingNoncePresent);
   FRIEND_TEST_ALL_PREFIXES(CSPDirectiveListTest, GetSourceVector);
@@ -236,6 +240,7 @@ class CORE_EXPORT CSPDirectiveList final
   bool CheckEval(SourceListDirective*) const;
   bool CheckWasmEval(SourceListDirective*) const;
   bool CheckDynamic(SourceListDirective*) const;
+  bool CheckDisableDynamic(SourceListDirective*) const;
   bool IsMatchingNoncePresent(SourceListDirective*, const String&) const;
   bool AreAllMatchingHashesPresent(SourceListDirective*,
                                    const IntegrityMetadataSet&) const;
@@ -296,6 +301,14 @@ class CORE_EXPORT CSPDirectiveList final
       const ContentSecurityPolicy::DirectiveType,
       const CSPDirectiveListVector& policies);
 
+  void SetDisableDynamic() {
+    disable_dynamic_present_ = true;
+  }
+
+  // bool CheckDisableDynamic() const {
+  //   return disable_dynamic_present_;
+  // }
+
   Member<ContentSecurityPolicy> policy_;
 
   String header_;
@@ -308,6 +321,8 @@ class CORE_EXPORT CSPDirectiveList final
 
   bool upgrade_insecure_requests_;
 
+  bool disable_dynamic_present_;
+
   Member<MediaListDirective> plugin_types_;
   Member<SourceListDirective> base_uri_;
   Member<SourceListDirective> child_src_;
diff --git a/third_party/blink/renderer/core/frame/csp/source_list_directive.cc b/third_party/blink/renderer/core/frame/csp/source_list_directive.cc
index 063158759fbf..00884b085c9c 100644
--- a/third_party/blink/renderer/core/frame/csp/source_list_directive.cc
+++ b/third_party/blink/renderer/core/frame/csp/source_list_directive.cc
@@ -16,6 +16,9 @@
 #include "third_party/blink/renderer/platform/wtf/text/string_to_number.h"
 #include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"
 
+#include "base/logging.h"
+
+
 namespace {
 struct SupportedPrefixesStruct {
   const char* prefix;
@@ -39,6 +42,7 @@ SourceListDirective::SourceListDirective(const String& name,
       allow_dynamic_(false),
       allow_unsafe_hashes_(false),
       report_sample_(false),
+      disable_dynamic_(false),
       hash_algorithms_used_(0) {
   Vector<UChar> characters;
   value.AppendTo(characters);
@@ -124,6 +128,10 @@ bool SourceListDirective::IsNone() const {
          !allow_dynamic_ && !nonces_.size() && !hashes_.size();
 }
 
+bool SourceListDirective::DisableDynamic() const {
+  return disable_dynamic_;
+}
+
 bool SourceListDirective::IsSelf() const {
   return allow_self_ && !list_.size() && !allow_star_ && !allow_inline_ &&
          !allow_unsafe_hashes_ && !allow_eval_ && !allow_wasm_eval_ &&
@@ -277,6 +285,13 @@ bool SourceListDirective::ParseSource(
     return true;
   }
 
+  if (EqualIgnoringASCIICase("'disable-dynamic'", token)) {
+    AddDisableDynamic();
+    LOG(INFO) << "Found disable-dynamic " << DisableDynamic();
+    return true;
+  }
+
+
   const UChar* position = begin;
   const UChar* begin_host = begin;
   const UChar* begin_path = end;
@@ -661,6 +676,10 @@ void SourceListDirective::AddSourceNonce(const String& nonce) {
   nonces_.insert(nonce);
 }
 
+void SourceListDirective::AddDisableDynamic() {
+  disable_dynamic_ = true;
+}
+
 void SourceListDirective::AddSourceHash(
     const ContentSecurityPolicyHashAlgorithm& algorithm,
     const DigestValue& hash) {
diff --git a/third_party/blink/renderer/core/frame/csp/source_list_directive.h b/third_party/blink/renderer/core/frame/csp/source_list_directive.h
index 4472f7b8bf87..fb498ebf7b5d 100644
--- a/third_party/blink/renderer/core/frame/csp/source_list_directive.h
+++ b/third_party/blink/renderer/core/frame/csp/source_list_directive.h
@@ -50,6 +50,7 @@ class CORE_EXPORT SourceListDirective final : public CSPDirective {
   uint8_t HashAlgorithmsUsed() const;
   bool AllowAllInline() const;
   bool AllowsURLBasedMatching() const;
+  bool DisableDynamic() const;
 
   // The algorithm is described more extensively here:
   // https://w3c.github.io/webappsec-csp/embedded/#subsume-source-list
@@ -111,6 +112,7 @@ class CORE_EXPORT SourceListDirective final : public CSPDirective {
 
   static void AddSourceToMap(HeapHashMap<String, Member<CSPSource>>&,
                              CSPSource*);
+  void AddDisableDynamic();
 
   bool HasSourceMatchInList(const KURL&, ResourceRequest::RedirectStatus) const;
   HashSet<String> GetIntersectNonces(const HashSet<String>& other) const;
@@ -138,6 +140,7 @@ class CORE_EXPORT SourceListDirective final : public CSPDirective {
   bool report_sample_;
   HashSet<String> nonces_;
   HashSet<CSPHashValue> hashes_;
+  bool disable_dynamic_;
   uint8_t hash_algorithms_used_;
 
   DISALLOW_COPY_AND_ASSIGN(SourceListDirective);
diff --git a/third_party/blink/renderer/core/html/parser/nesting_level_incrementer.h b/third_party/blink/renderer/core/html/parser/nesting_level_incrementer.h
index ce08a16b68b1..3b3c54e3731a 100644
--- a/third_party/blink/renderer/core/html/parser/nesting_level_incrementer.h
+++ b/third_party/blink/renderer/core/html/parser/nesting_level_incrementer.h
@@ -42,6 +42,10 @@ class NestingLevelIncrementer {
 
   ~NestingLevelIncrementer() { --(*nesting_level_); }
 
+  // bool NestingLevelAboveZero() {
+  //   return *nesting_level_;
+  // }
+
  private:
   unsigned* nesting_level_;
 
diff --git a/third_party/blink/renderer/core/script/html_parser_script_runner.cc b/third_party/blink/renderer/core/script/html_parser_script_runner.cc
index 9d2e2ddccee8..e9513ed2bac5 100644
--- a/third_party/blink/renderer/core/script/html_parser_script_runner.cc
+++ b/third_party/blink/renderer/core/script/html_parser_script_runner.cc
@@ -44,6 +44,9 @@
 #include "third_party/blink/renderer/platform/instrumentation/tracing/trace_event.h"
 #include "third_party/blink/renderer/platform/instrumentation/tracing/traced_value.h"
 
+#include "third_party/blink/renderer/core/frame/csp/content_security_policy.h"
+#include "base/logging.h"
+
 namespace blink {
 
 namespace {
@@ -84,6 +87,7 @@ void DoExecuteScript(PendingScript* pending_script, const KURL& document_url) {
   TRACE_EVENT_WITH_FLOW1("blink", "HTMLParserScriptRunner ExecuteScript",
                          pending_script->GetElement(), TRACE_EVENT_FLAG_FLOW_IN,
                          "data", GetTraceArgsForScriptElement(pending_script));
+//
   pending_script->ExecuteScriptBlock(document_url);
 }
 
@@ -226,6 +230,19 @@ void HTMLParserScriptRunner::
     IgnoreDestructiveWriteCountIncrementer
         ignore_destructive_write_count_incrementer(document_);
 
+    // ContentSecurityPolicy* docCSP = document_->GetContentSecurityPolicy();
+    // bool disableDynamicPresent = docCSP->FoundDisableDynamic();
+
+    // LOG(INFO) << "Check for DisableDynamic in Script Runner...disableDynamicPresent: " << disableDynamicPresent;
+
+    // if (disableDynamicPresent) {
+    //   LOG(INFO) << "This is the Script Nesting Level Value... " << ScriptNestingLevelValue();
+    //   if (ScriptNestingLevelValue() > 0) {
+    //     //RETURN EARY DON'T EXECUTE SCRIPT
+    //     return;
+    //   }
+    // }
+
     // <spec step="B.8">Execute the script.</spec>
     DCHECK(IsExecutingScript());
     DoExecuteScript(pending_script, DocumentURLForScriptExecution(document_));
@@ -326,6 +343,22 @@ void HTMLParserScriptRunner::ProcessScriptElement(
 
   bool had_preload_scanner = host_->HasPreloadScanner();
 
+  // ContentSecurityPolicy* docCSP;
+  ContentSecurityPolicy* docCSP = document_->GetContentSecurityPolicy();
+  bool disableDynamicPresent = docCSP->FoundDisableDynamic();
+
+  LOG(INFO) << "Check for DisableDynamic in Script Runner...disableDynamicPresent: " << disableDynamicPresent;
+
+  if (disableDynamicPresent) {
+    LOG(INFO) << "This is the Script Nesting Level Value... " << ScriptNestingLevelValue();
+    if (ScriptNestingLevelValue() > 0) {
+      //RETURN EARY DON'T EXECUTE SCRIPT
+      LOG(INFO) << "We have BLOCKED a script from executing in the Script Runner -------------------";
+      return;
+    }
+  }
+
+
   // <spec>An end tag whose tag name is "script" ...</spec>
   //
   // Try to execute the script given to us.
@@ -606,6 +639,15 @@ void HTMLParserScriptRunner::ProcessScriptElementInternal(
     // which might cause new characters to be inserted into the tokenizer, and
     // might cause the tokenizer to output more tokens, resulting in a reentrant
     // invocation of the parser. ...</spec>
+
+    // ContentSecurityPolicy* docCSP = document_->GetContentSecurityPolicy();
+    // bool disableDynamicPresent = docCSP->FoundDisableDynamic();
+
+    // LOG(INFO) << "Check for DisableDynamic in Script Runner...disableDynamicPresent: " << disableDynamicPresent;
+    // uint nestLevel = ScriptNestingLevelValue();
+    // LOG(INFO) << "hello" << nestLevel;
+
+
     script_loader->PrepareScript(script_start_position);
 
     if (!script_loader->WillBeParserExecuted())
@@ -639,6 +681,14 @@ void HTMLParserScriptRunner::ProcessScriptElementInternal(
         if (parser_blocking_script_)
           parser_blocking_script_->Dispose();
         parser_blocking_script_ = nullptr;
+        // if (disableDynamicPresent) {
+        //   LOG(INFO) << "This is the Script Nesting Level Value... " << nestLevel;
+        //   if (nestLevel > 0) {
+        //     //RETURN EARY DON'T EXECUTE SCRIPT
+        //     return;
+        //   }
+        // }
+
         DoExecuteScript(
             script_loader->TakePendingScript(ScriptSchedulingType::kImmediate),
             DocumentURLForScriptExecution(document_));
diff --git a/third_party/blink/renderer/core/script/html_parser_script_runner.h b/third_party/blink/renderer/core/script/html_parser_script_runner.h
index 390b3de35ea3..19a971cafba4 100644
--- a/third_party/blink/renderer/core/script/html_parser_script_runner.h
+++ b/third_party/blink/renderer/core/script/html_parser_script_runner.h
@@ -101,6 +101,10 @@ class HTMLParserScriptRunner final
     return !!reentry_permit_->ScriptNestingLevel();
   }
 
+  unsigned ScriptNestingLevelValue() const {
+    return reentry_permit_->ScriptNestingLevel();
+  }
+
   // Records metrics related to the parsing phase. To be called when parsing
   // is preparing to stop but before |ExecuteScriptsWaitingForParsing|.
   void RecordMetricsAtParseEnd() const;
-- 
2.28.0.windows.1

